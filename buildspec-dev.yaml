version: 0.2

env:
  variables:
    _PROJECT_NAME: "sapbss-pjt-template"
    _SERVICE_NAME: "sapbss-pjt-template"
    _NAME_SPACE: "dev-bss"
    _ENV: "-dev"
    _REGISTRY_DEF: "sample"  # erpbss, sample, solution, mgmt 중 하나 선택함. 일반적인 런타임은  erpbss 임. 
    AWS_ACCOUNT_ID: "590183920582"
    AWS_DEFAULT_REGION: ap-northeast-2
    AWS_CLUSTER_NAME: dev-bss-eks
    AWS_CLUSTER_NAME_2: dev-bss-eks-2
    _DOCKER_FILE_NAME: "Dockerfile"
    DEFAULT_IMAGE_TAG: "1.0.0-SNAPSHOT"
   
phases:
  install:
    commands:
      - sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
      - IMAGE_TAG=$DEFAULT_IMAGE_TAG.$(date +%Y%m%d).$(echo $CODEBUILD_BUILD_NUMBER)
      # - sudo yum install -y java-17-openjdk-devel
      - java -version 
      # - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      # - unzip awscliv2.zip
      # - sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - aws sts get-caller-identity 
      - echo install kubectl
      - mkdir ~/.kube
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl 
      - aws --version
      - aws eks update-kubeconfig --name $AWS_CLUSTER_NAME --region $AWS_DEFAULT_REGION 
      - echo kubeconfig for cluster 2
      - aws eks update-kubeconfig --name $AWS_CLUSTER_NAME_2 --region $AWS_DEFAULT_REGION 
      #- aws eks describe-cluster --name $AWS_CLUSTER_NAME --region $AWS_DEFAULT_REGION 
      - echo install helm
      - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
      - chmod 700 get_helm.sh
      - ./get_helm.sh
      - helm version

      - echo "캐시 디렉토리 확인.."
      # cache 이하 디렉토리를 적절히 수정
      - ls -al /mnt/efs
      - if [ ! -d "/mnt/efs/${_PROJECT_NAME}/cache" ]; then mkdir -p /mnt/efs/$_PROJECT_NAME/cache; touch /mnt/efs/$_PROJECT_NAME/create-$(date +%Y%m%d%H%M%S); fi
      - ls -al /mnt/efs/$_PROJECT_NAME

  pre_build:
    commands:
      - java -version
      - echo -e 'Maven version:'
      - mvn --version 
      - export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain sapbss --domain-owner $AWS_ACCOUNT_ID --region ap-northeast-1 --query authorizationToken --output text`
      - echo $CODEARTIFACT_AUTH_TOKEN
      - echo "creating custom settings.xml for Maven..."
      - |
        cat > ~/.m2/settings.xml << 'EOL'
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>sapbss-dev-bss-codeartifact</id>
              <username>aws</username>
              <password>${env.CODEARTIFACT_AUTH_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOL
      - cat ~/.m2/settings.xml        
      - echo Logging in to Amazon ECR...
      - echo $_PROJECT_NAME
      - echo $AWS_ACCOUNT_ID
      - echo $AWS_DEFAULT_REGION
      - echo $IMAGE_TAG
      - echo start command
      - mvn -s ~/.m2/settings.xml deploy
      - mvn -s ~/.m2/settings.xml clean package 
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com    
      # - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)


  build:
    commands:
      - echo Dockerfile 내의 AWS_ACCOUNT_ID 를 해당 계정으로 변경
      - sed -i "s/AWS-ACCOUNT-ID/${AWS_ACCOUNT_ID}/g" Dockerfile
      - cat Dockerfile      
      - echo Build started on `date`
      - echo Building the Docker image...
      - echo PWD - $PWD
      - docker build -f $_DOCKER_FILE_NAME --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION --build-arg AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$_REGISTRY_DEF/$_SERVICE_NAME:$IMAGE_TAG  .
      
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$_REGISTRY_DEF/$_SERVICE_NAME:$IMAGE_TAG

      # - echo connect kubectl
      # - kubectl get ns 
      # - kubectl config view 
      # - kubectl config get-contexts
      # - echo apply deployment app
      # - kubectl apply -f manifests/deployment$_ENV.yml -n $_NAME_SPACE 
      # - kubectl rollout restart deployment.apps/$_SERVICE_NAME -n $_NAME_SPACE
      # - echo apply service
      # - kubectl apply -f manifests/service$_ENV.yml -n $_NAME_SPACE
      # - echo apply service
      # - kubectl apply -f manifests/ingress$_ENV.yml -n $_NAME_SPACE

      - echo connect helm 1
      - echo command- $_SERVICE_NAME helm -f helm/values$_ENV.yaml --namespace $_NAME_SPACE --set image.tag=$IMAGE_TAG 
      - kubectl config use-context arn:aws:eks:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:cluster/$AWS_CLUSTER_NAME
      - kubectl config get-contexts
      - helm upgrade --install $_SERVICE_NAME helm -f helm/values$_ENV.yaml --namespace $_NAME_SPACE --set image.tag=$IMAGE_TAG

      - echo connect helm 2
      - echo command- $_SERVICE_NAME helm -f helm/values$_ENV.yaml --namespace $_NAME_SPACE --set image.tag=$IMAGE_TAG 
      - kubectl config use-context arn:aws:eks:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:cluster/$AWS_CLUSTER_NAME_2
      - kubectl config get-contexts 
      - helm upgrade --install $_SERVICE_NAME helm -f helm/values$_ENV.yaml --namespace $_NAME_SPACE --set image.tag=$IMAGE_TAG

      - echo Job Finished!!! 

cache:
#   paths:
#     - '/root/.gradle/caches/**/*'
  paths:
    - '/root/.m2/**/*'    
    - '/mnt/efs/$_PROJECT_NAME/cache/**/*'